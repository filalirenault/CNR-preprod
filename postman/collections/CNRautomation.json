{
	"info": {
		"_postman_id": "01ebb26a-b8c6-4f36-b7d0-feca22eb9c8e",
		"name": "CNRautomation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "26626745-01ebb26a-b8c6-4f36-b7d0-feca22eb9c8e"
	},
	"item": [
		{
			"name": "Get the token",
			"item": [
				{
					"name": "cnr generate access_token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd8bb31b-06c4-49dd-a3b7-c7a71955973a",
								"exec": [
									"// okta environment endpoint",
									"const AUD = \"https://sso-dev.renault.com/oauth2/austmw35vFS9ZhxVY416/v1/token\";",
									"//const AUD = \"https://sso-uat.renault.com/oauth2/austwoeshbCkPJyw1416/v1/token\";",
									"//const AUD = \"https://sso.renault.com/oauth2/aus133y6mks4ptDss417/v1/token\";",
									"   ",
									"// client id of your application",
									"const CLIENT_ID=\"irn-74772_dev_pkjwt_w7djluvltrxp\";",
									"  ",
									"// certificate kid (cf. https://synergyprod1.service-now.com/it?id=sc_cat_item&sys_id=04c550d9878d011096bb20aabbbb35c1 )",
									"const KID=\"2025-03-13-2511347\";",
									"  ",
									"// your certificate private key",
									"const PRIVATE_KEY = \"-----BEGIN PRIVATE KEY-----\\",
									"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC/z56kyzwmNNmp\\",
									"A4zqqp43jPTqpU5TSpmR8r3NTtPuAfL5MUqjarsfGxiKDbFgUTv+DHSZIeAU3ZaJ\\",
									"Oa/Uclo4OKrq3wH2ZlLIuYz7lwbReSuAmE1WRKbLsEtO+qYw9OLrnzYPACF79Irp\\",
									"lydKjrFGV5vbckamUNAuoTKkh/8PKTsDANtik0X/KzwdwOI1guA78OSWREuH9xc5\\",
									"yBg+LfXf7JVQMerhVWerdkWfszKmzd7IHJvk5sZkm6d0ju6AZ4ewdEyozDQTdEdP\\",
									"32+tKgkusKNwNtl05AEFmx3PplecETz+1cLjkQVRVAmdz7Uw/AtV2cB3qG/jHH92\\",
									"po0o+ULxAgMBAAECggEAZwubJt0oSz5JUMtfgRJ4PU+0o/p6wbRqHEZUQV//6vWR\\",
									"Gt6oQnKsZGGiJUiF6kC6Ahme6kWQpKUGomIjW/azEVEgQV3dKAqAnuVQIDlaqF54\\",
									"SHWJ1ra7BOKJEr0FW3e0EPFPkW94jacqmaNisGNISYn3aUVTPzZbITHoiwuksvd9\\",
									"R9uhUuHDZ2WBSppVOuejW3jrK0Ea5gCCeBusBJtCyoewPa9oEgOyrHGxUwXqxQJ9\\",
									"1FCVODOofSTZRO0WWzuUs9bTF98dAy8flNrSSRBM8idRSgiedYSPguwz57VlSkBc\\",
									"zm1fsfWV0HQF4M7XxhmHy/tTuIeneiKP9phAwATLgQKBgQDlZ7kMv9CO15mOj+w3\\",
									"5BZhq9QmZq6v4awXbB4xRycpgJLoazwmK6V2VrgKmZ164Zy/7IfvVlqPVp1UbYRN\\",
									"Q+ecXuG8U1H0M/lBAShwRZJphPHEHlIiSOHsOsald4ZlWLPFFDWPK0A9xtQacd+3\\",
									"FqH253yZ2uaj/sugSG+aVHUHlQKBgQDWDC3a+nTXFKhb04xrzpE2HtOxaqcSb7S/\\",
									"DqbKDZnpPXpndc1qa/XTx8TR4PqRtOyxkU+d5IO3qNuNER3cGcJKQQbopK/nUttj\\",
									"0EwIKO0Hl66tKzKKoNjNmQK4/9C+FqaI9/0cZjOFtVtM2JsP7Lz7UgNXNpaioyb5\\",
									"o4oEoLTG7QKBgHl886gH0RhEn4K7P3rd5Oh2yhRIHszwM2X4EQlByECXYbWKTMFe\\",
									"LfM8u5yJe7e+0XdmeRrL3Yu5b/ptQTp18quCKAPHEEjGWYMObO8AOSh+ila1RAP6\\",
									"GwMyoU6xvM/hKNr+99pJKm1M5bjXg4V/i+io8Pi9z5Ub85R/p/LQNWX9AoGAf5XS\\",
									"32vaqTlPAS0fzkLam3/UfzQrUfnzqs547Ice7sAObgzx3DVt2kaBMvj/YkqNq2oK\\",
									"IvtK5/Zmp7dELSXNgaUxEQrZLvFchCpsp5B9eMEZBW9yON+XWzWRQeR58FRf/9SR\\",
									"spPYsiJfwXZ7NwrNuqAwDZQkRd0qJjMs2YVRPCECgYEA0Sd/SAdNOlonflgO1T/R\\",
									"YiC4zb6kvSI31VyYCmuXJBFF/ndUZ0uk3UPaPpAdb3p12/RjgYbQ7fkyhLv4I3lo\\",
									"nBspgzqpUmoAy6g8wrz78P6aCkLlmuW9evS3o1XvhPzFnvB7MZ43bKjaktx+/fET\\",
									"0Zy8uQlUJn88kCDglG+FjIo=\\",
									"-----END PRIVATE KEY-----\";",
									"   ",
									"//life time of the assertion in seconds",
									"const LIFE_TIME = 300;",
									"  ",
									"/********** END CONST ******************/",
									"   ",
									"var navigator = {};",
									"var window = {};",
									"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.20/jsrsasign-all-min.js', (err, res) => {",
									"eval(res.text());",
									"   ",
									"// Set headers for JWT",
									"var header = {",
									"    \"kid\": KID,",
									"    \"alg\": \"RS256\"",
									"};",
									"   ",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000);",
									"   ",
									"var data = {",
									"  \"aud\": AUD,",
									"  \"exp\": currentTimestamp + LIFE_TIME,",
									"  \"iss\": CLIENT_ID,",
									"  \"sub\": CLIENT_ID,",
									"  \"iat\": currentTimestamp,",
									"  \"jti\": generateUUID()",
									" ",
									"};",
									"   ",
									"var sHeader = JSON.stringify(header);",
									"var sPayload = JSON.stringify(data);",
									"   ",
									"var sJWT = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, PRIVATE_KEY);",
									"   ",
									"pm.environment.set('client_assertion', sJWT)",
									"});",
									" ",
									"function generateUUID() { ",
									"    var d = new Date().getTime();",
									"    var d2 = ((typeof performance !== 'undefined') && performance.now && (performance.now()*1000)) || 0;",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
									"        var r = Math.random() * 16;",
									"        if(d > 0){",
									"            r = (d + r)%16 | 0;",
									"            d = Math.floor(d/16);",
									"        } else {",
									"            r = (d2 + r)%16 | 0;",
									"            d2 = Math.floor(d2/16);",
									"        }",
									"        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a9f43b93-bade-40b6-a88f-79859429282c",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"cnr_okta_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6a4b71bd-3243-4a6a-ab5d-82367fa0b517",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "apis.default ",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://sso-dev.renault.com/oauth2/austmw35vFS9ZhxVY416/v1/token",
							"protocol": "https",
							"host": [
								"sso-dev",
								"renault",
								"com"
							],
							"path": [
								"oauth2",
								"austmw35vFS9ZhxVY416",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"id": "dde0dd14-2c0a-41d2-9481-feaed547261f"
		},
		{
			"name": "Confirmation de souscription OK",
			"item": [
				{
					"name": "Get the eligible services",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5414051a-68cb-402d-bdf4-a2f8538e3236",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"FirstCOffer\", jsonData[0].contextualOfferId);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"SecondCOffer\", jsonData[1].contextualOfferId);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"ThirdCOffer\", jsonData[2].contextualOfferId);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"FourthCOffer\", jsonData[3].contextualOfferId);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"FirstGOffer\", jsonData[0].genericOfferId);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"SecondGOffer\", jsonData[2].genericOfferId);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"ThirdGOffer\", jsonData[3].genericOfferId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"console.log(vin);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "666ba603-4207-4915-9e11-6bc69496278b",
								"exec": [
									"pm.environment.set(\"vin\", \"VF\" + Math.floor((Math.random() * (999999999999999-100000000000000) + 100000000000000)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4e512895-8cce-4b2a-9e68-d84fd372b23b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/subscriptions/{{vin}}/eligible-offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions",
								"{{vin}}",
								"eligible-offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"pm.test(\"The vin >\"+vin+\"< is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(vin);\r",
									"});\r",
									"\r",
									"var FirstCOffer = pm.environment.get(\"FirstCOffer\");\r",
									"pm.test(\"The cOffer >\"+FirstCOffer+\"< is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(FirstCOffer);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"console.log(vin);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a51baf57-aac9-432d-b3c3-4ed9446507be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\",\r\n  \"contextualOfferId\": \"{{FirstCOffer}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5414051a-68cb-402d-bdf4-a2f8538e3236",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"SubscriptionID\", jsonData[0].subscriptionId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var status = jsonData[0].status;\r",
									"\r",
									"pm.test(\"The status is confirmed\", function () {\r",
									"    pm.expect(status).to.equal(\"CONFIRMED\");\r",
									"});\r",
									"\r",
									"console.log(status);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "81f3ddb2-09b2-47b8-bb23-23af1b0b1685",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/subscriptions/{{vin}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions",
								"{{vin}}",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32790b4b-eef7-4764-8441-ceafe1154397",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"console.log(vin);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e4b98df3-83e5-4723-962a-a28a943d06c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\",\r\n  \"genericOfferId\": \"{{FirstGOffer}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/event",
							"host": [
								"{{url}}"
							],
							"path": [
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5414051a-68cb-402d-bdf4-a2f8538e3236",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var status = jsonData[0].status;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The status is active\", function () {\r",
									"    pm.expect(status).to.equal(\"ACTIVE\");\r",
									"});\r",
									"\r",
									"console.log(status);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0072aa0b-1392-4adc-beb2-3765019f667b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/subscriptions/{{vin}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions",
								"{{vin}}",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "End the subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0451ffd2-889e-479b-98e2-7172246ffa87",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"pm.test(\"The vin >\"+vin+\"< is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(vin);\r",
									"});\r",
									"\r",
									"var FirstGOffer = pm.environment.get(\"FirstGOffer\");\r",
									"pm.test(\"The gOffer >\"+FirstGOffer+\"< is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(FirstGOffer);\r",
									"});\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"console.log(vin);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8a76c86b-c9d1-4e37-b249-2685684ef7a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/subscriptions/{{vin}}/{{FirstGOffer}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions",
								"{{vin}}",
								"{{FirstGOffer}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5414051a-68cb-402d-bdf4-a2f8538e3236",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var status = jsonData[0].status;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The status is terminated\", function () {\r",
									"    pm.expect(status).to.equal(\"TERMINATED\");\r",
									"});\r",
									"\r",
									"console.log(status);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f69a0309-e28b-4975-8bbe-8ce179f84fc5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/subscriptions/{{vin}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions",
								"{{vin}}",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the subscription events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5414051a-68cb-402d-bdf4-a2f8538e3236",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var status = jsonData[0].status;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var eventNB =  jsonData.length;\r",
									"pm.test(\"We have 3 events in this subscription\", function () {\r",
									"    pm.expect(eventNB).to.equal(3);\r",
									"});\r",
									"\r",
									"var firstEventType =  jsonData[2].type;\r",
									"var secondEventType =  jsonData[1].type;\r",
									"var thirdEventType =  jsonData[0].type;\r",
									"\r",
									"pm.test(\"The first event type is confirmed\", function () {\r",
									"    pm.expect(firstEventType).to.equal(\"CONFIRMED\");\r",
									"});\r",
									"\r",
									"pm.test(\"The first event type is activated\", function () {\r",
									"    pm.expect(secondEventType).to.equal(\"ACTIVATED\");\r",
									"});\r",
									"\r",
									"pm.test(\"The third event type is terminated on request\", function () {\r",
									"    pm.expect(thirdEventType).to.equal(\"TERMINATED_ON_REQUEST\");\r",
									"});\r",
									"\r",
									"console.log(eventNB);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e72bafff-d773-47a8-a19d-d786bb94cdab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/subscriptions/{{SubscriptionID}}/events",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions",
								"{{SubscriptionID}}",
								"events"
							]
						}
					},
					"response": []
				}
			],
			"id": "41920451-d8cd-4262-8cf7-ae617917c4ac",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ca58d44b-f6a5-4d28-8dbd-7aa014eaa085",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "77cea05e-e9a8-4247-839f-0e857cdd8ef2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Subscription confirmation KO subscrining to a G1Coffer1 when another subscription to G1Coffer2 already exists",
			"item": [
				{
					"name": "Get the eligible services",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5414051a-68cb-402d-bdf4-a2f8538e3236",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"FirstCOffer\", jsonData[0].contextualOfferId);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"SecondCOffer\", jsonData[1].contextualOfferId);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"FirstGOffer\", jsonData[0].genericOfferId);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"console.log(vin);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "666ba603-4207-4915-9e11-6bc69496278b",
								"exec": [
									"pm.environment.set(\"vin\", \"VF\" + Math.floor((Math.random() * (999999999999999-100000000000000) + 100000000000000)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3bb073e3-95b2-4dac-bd4a-a71d190e6b4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/subscriptions/{{vin}}/eligible-offers",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions",
								"{{vin}}",
								"eligible-offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription Coffer1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"pm.test(\"The vin >\"+vin+\"< is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(vin);\r",
									"});\r",
									"\r",
									"var FirstCOffer = pm.environment.get(\"FirstCOffer\");\r",
									"pm.test(\"The cOffer >\"+FirstCOffer+\"< is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(FirstCOffer);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"console.log(vin);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5912950f-e791-48e3-89eb-76b162c25d1a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\",\r\n  \"contextualOfferId\": \"{{FirstCOffer}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription Coffer2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"pm.test(\"Status code is 412\", function () {\r",
									"    pm.response.to.have.status(412);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"pm.test(\"The vin >\"+vin+\"< is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(vin);\r",
									"});\r",
									"\r",
									"pm.test(\"The error message is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Subscription is already confirmed for\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a4a3370b-36e4-4690-8cf8-05010715ebb9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\",\r\n  \"contextualOfferId\": \"{{SecondCOffer}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32790b4b-eef7-4764-8441-ceafe1154397",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"console.log(vin);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5957db24-fa57-4e67-8e15-295bae1eac04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\",\r\n  \"genericOfferId\": \"{{FirstGOffer}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/event",
							"host": [
								"{{url}}"
							],
							"path": [
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription Coffer2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"pm.test(\"Status code is 412\", function () {\r",
									"    pm.response.to.have.status(412);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"pm.test(\"The vin >\"+vin+\"< is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(vin);\r",
									"});\r",
									"\r",
									"pm.test(\"The error message is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"It's to early to renew\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "889e5328-bf3a-4ab6-a636-509617848c22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\",\r\n  \"contextualOfferId\": \"{{SecondCOffer}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "End the subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0451ffd2-889e-479b-98e2-7172246ffa87",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"pm.test(\"The vin >\"+vin+\"< is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(vin);\r",
									"});\r",
									"\r",
									"var FirstGOffer = pm.environment.get(\"FirstGOffer\");\r",
									"pm.test(\"The gOffer >\"+FirstGOffer+\"< is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(FirstGOffer);\r",
									"});\r",
									"var vin = pm.environment.get(\"vin\");\r",
									"console.log(vin);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "65124532-ba0f-4528-88ef-3bd8bee5ff58",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/subscriptions/{{vin}}/{{FirstGOffer}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions",
								"{{vin}}",
								"{{FirstGOffer}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "e59f9408-2d78-4cc8-b774-3a713fe0ced2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ca58d44b-f6a5-4d28-8dbd-7aa014eaa085",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "77cea05e-e9a8-4247-839f-0e857cdd8ef2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Souscription KO Token not existing or not delivered or incorrect",
			"item": [
				{
					"name": "Subscription KO Token not correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71fbb5fe-bfa1-499c-819d-5ac1bfc92c68",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"TokenValidationError: Not a JWT\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"TokenValidationError: Not a JWT\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ae577af3-70d1-4731-9eec-c678c15014e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\",\r\n  \"contextualOfferId\": \"CONTEXTUAL_OFFER_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription KO Token empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71fbb5fe-bfa1-499c-819d-5ac1bfc92c68",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"TokenValidationError: Not a JWT\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"TokenValidationError: Not a JWT\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4e15828f-fb8d-42ed-9fe3-809ea2484eeb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\",\r\n  \"contextualOfferId\": \"CONTEXTUAL_OFFER_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription KO Token not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71fbb5fe-bfa1-499c-819d-5ac1bfc92c68",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Unauthorized\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6a10cea6-a709-4371-babb-16f0cf8fa35e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\",\r\n  \"contextualOfferId\": \"CONTEXTUAL_OFFER_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				}
			],
			"id": "fe1432e2-ac55-497d-99c4-5b4474cccc0e"
		},
		{
			"name": "Souscription KO COffre not existing or not delivered",
			"item": [
				{
					"name": "Subscription KO COffer non correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"pm.test(\"Status code is 412\", function () {\r",
									"    pm.response.to.have.status(412);\r",
									"});\r",
									"\r",
									"pm.test(\"contextual offer is not applicable for the VIN\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"contextual offer is not applicable for the VIN\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5d8f9d64-ea0b-4131-92f1-0ae361c6efde",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\",\r\n  \"contextualOfferId\": \"CONTEXTUAL_OFFER_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription KO COffer vide",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"contextualOfferId should not be empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"contextualOfferId should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cc474a92-b86c-48d2-92fb-21cafe4ff291",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\",\r\n  \"contextualOfferId\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription KO COffer non fournie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"contextualOfferId should not be empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"contextualOfferId should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fede3e85-76a0-4455-b84f-f38124d4d127",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"{{vin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				}
			],
			"id": "c41d5a17-b52f-4d94-a29f-673f613c8921"
		},
		{
			"name": "Souscription KO Vin in wrong format not delivered or empty",
			"item": [
				{
					"name": "Subscription KO Vin not in the right format with special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"The format for the VIN is invalid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The format for the VIN is invalid\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ffeeb480-2232-4ac4-b4ec-4d417b8d01af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"VF662222222-22222\",\r\n  \"contextualOfferId\": \"CONTEXTUAL_OFFER_2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription KO Vin not in the the right format less than 17 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"The format for the VIN is invalid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The format for the VIN is invalid\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "887147f3-cf41-41f7-bd96-9d021187c88c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"VN22223000000000\",\r\n  \"contextualOfferId\": \"CONTEXTUAL_OFFER_2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription KO Vin not in the the right format more than 17 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"The format for the VIN is invalid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The format for the VIN is invalid\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7fbbffb5-7ff4-4660-84f6-7a2906529f73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"VN222230000000000000\",\r\n  \"contextualOfferId\": \"CONTEXTUAL_OFFER_2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription KO Vin empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"vin should not be empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"vin should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8a0d2b31-1200-4bee-bd79-aface9863313",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vin\": \"\",\r\n  \"contextualOfferId\": \"CONTEXTUAL_OFFER_2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription KO COffer not delivered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48da0f2c-3bb4-4413-b805-bbd51bbcab9f",
								"exec": [
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"vin should not be empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"vin should not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c8d2b50d-ddd1-4809-a735-aefe3de5a62b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cnr_okta_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contextualOfferId\": \"CONTEXTUAL_OFFER_2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subscriptions",
							"host": [
								"{{url}}"
							],
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				}
			],
			"id": "df9c2a60-cca7-4bf6-b8e5-feb958a4ec0e"
		}
	]
}